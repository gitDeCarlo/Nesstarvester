package org.openmetadata.ddiharvester;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Properties;

import org.basex.core.BaseXException;
import org.basex.core.Context;
import org.basex.core.cmd.Close;
import org.basex.core.cmd.Open;
import org.basex.core.cmd.XQuery;
import org.junit.Test;
import org.openmetadata.ddipublisher.DdiPublisher;
import org.openmetadata.harvester.Harvester;
import org.openmetadata.nesstar.HarvesterOptions;
import org.openmetadata.nesstar.ServerConfiguration;
import org.openmetadata.nesstar.task.Publisher;

import com.nesstar.api.FolderTreeNode;
import com.nesstar.api.NesstarTreeNode;
import com.nesstar.api.Study;

public class harvesterTest {


	@Test
	public void testHarvester() throws Exception{

		String[] args = {"src/test/resources/harvester.properties"};

		Harvester.main(args);

		//Delete files to create another full update
		//File ddiFolder = new File("/home/andrew/Nesstar/BetaCat");
		//delete(ddiFolder);

		//File database = new File("/home/andrew/BaseXData/BetaCat");
		//delete(database);

	}

	@Test
	public void testPublisher() throws Exception{

		String[] args = {"src/test/resources/publisher.properties"};

		DdiPublisher.main(args);

		//Delete files to create another full update
		//File ddiFolder = new File("/home/andrew/Nesstar/BetaCat");
		//delete(ddiFolder);

		//File database = new File("/home/andrew/BaseXData/BetaCat");
		//delete(database);

	}

	
	@Test
	public void createProperties() throws Exception{
		// create and load default properties
		Properties defaultProps = new Properties();
		FileInputStream in = new FileInputStream("src/test/resources/harvester.properties");
		defaultProps.load(in);
		in.close();

		// create application properties with default
		Properties applicationProps = new Properties(defaultProps);

		/*
		applicationProps.setProperty("serverUrl","http://compass-data.unil.ch");
		applicationProps.setProperty("portNumber","80");
		applicationProps.setProperty("outputFolder","/home/andrew/Nesstar/ch_fors_compass");
		applicationProps.setProperty("languageList","en");

		FileOutputStream out = new FileOutputStream("src/test/resources/harvester.properties");
		applicationProps.store(out, "---Harvester Options for Nesstarvester---");
		out.close();	
		 */

		System.out.println(applicationProps.getProperty("hello"));
	}

	public static void delete(File file) 	throws IOException{

		if(file.isDirectory()){

			//directory is empty, then delete it
			if(file.list().length==0){

				file.delete();
				System.out.println("Directory is deleted : " 
						+ file.getAbsolutePath());

			}else{

				//list all the directory contents
				String files[] = file.list();

				for (String temp : files) {
					//construct the file structure
					File fileDelete = new File(file, temp);

					//recursive delete
					delete(fileDelete);
				}

				//check the directory again, if empty then delete it
				if(file.list().length==0){
					file.delete();
					System.out.println("Directory is deleted : " 
							+ file.getAbsolutePath());
				}
			}

		}else{
			//if file, then delete it
			file.delete();
			System.out.println("File is deleted : " + file.getAbsolutePath());
		}
	}


	@Test
	public void testPublish() throws Exception{

		HarvesterOptions options = new HarvesterOptions();
		options.setServerUrl("http://nesstar.snd.gu.se");
		options.setPortNumber(80);
		options.setOutputFolder("/home/andrew/Nesstar/snd.eng/");
		options.setDb("AdpEnStudies");
		options.setServerID("SND");		

		Publisher publisher = new Publisher(options);
		publisher.publish();
	}

	@Test 
	public void reap() throws Exception{
		LinkedHashMap<String, Integer> servers = new LinkedHashMap<String, Integer>();
		servers.put("http://nesstar.dda.dk",80);
		//		servers.put("s-nesstar.sociologia.unimib.it", 80);
		//		servers.put("nesstar.dans.knaw.nl",80);
		//		servers.put("nesstar.dda.dk",80);
		//		servers.put("nesstar.sidos.ch", 80);
		//		servers.put("fsd2.uta.fi",8080);
		//		servers.put("zacat.gesis.org",80);
		//		servers.put("94.70.130.211", 80);
		//		servers.put("nesstar.snd.gu.se",80);
		//		servers.put("80.75.252.24", 8080);
		//		servers.put("nesstar.esds.ac.uk", 80);
		//		servers.put("http://nsddata.nsd.uib.no", 80);
		//		servers.put("mma.nsd.uib.no", 80);
		//		servers.put("nesstar.ess.nsd.uib.no",80);
		//		servers.put("essmdr.nsd.uib.no", 80);
		//		servers.put("eed.nsd.uib.no", 80);
		//		servers.put("status.vox.no", 80);
		//		servers.put("www.foustatistikkbanken.no", 80);
		//		servers.put("www.norgeshelsa.no", 80);
		//		servers.put("tromsoundersokelsen.uit.no", 80);
		//		servers.put("conor.uit.no", 80);
		//		servers.put("misa.uit.no", 80);
		//		servers.put("www62.statcan.ca",80);
		//		servers.put("www.eastsussexinfigures.org.uk", 80);
		//		servers.put("odesi1.scholarsportal.info", 80);
		//		servers.put("bergamo.ens.fr", 81);
		//		servers.put("nesstar.ssc.wisc.edu",81);
		//		servers.put("nesstar.sciences-po.fr",81);
		//		servers.put("nesstar.ined.fr", 80);
		//		servers.put("nesstar.ucd.ie",80);
		//		servers.put("www.lidata.eu", 80);


		String info = "src/test/resources/ServerCatalogs2.txt";
		FileWriter fw = new FileWriter(info);
		BufferedWriter bw = new BufferedWriter(fw);

		for(String key : servers.keySet()){
			ServerConfiguration serverConfig = new ServerConfiguration();
			String serverUrl = key;
			Integer portNumber = servers.get(key);
			try{

				HarvesterOptions options = new HarvesterOptions();
				options.setServerUrl(serverUrl);
				options.setPortNumber(portNumber);

				//creates a serverConfiguation based on the url given in the file
				serverConfig.addServer(options);

				bw.write(key+"\n");

				ArrayList<Study> studies = new ArrayList<Study>();

				for(NesstarTreeNode treeNode : serverConfig.getServers().get(0).getTreeRoot().getChildren()){
					bw.write("\t"+treeNode.getLabel()+"\n");
					if(treeNode instanceof FolderTreeNode){
						FolderTreeNode folderNode = (FolderTreeNode)treeNode;
						for(NesstarTreeNode treeNode2 : folderNode.getChildren()){
							bw.write("\t\t"+treeNode2.getLabel()+"\n");
						}
					}
				}
			}
			catch(Exception e){
				bw.write(key+"\n");
				bw.write("\tCould not find server.\n");
			}
			bw.write("\n");
		}
		bw.close();
	}

	@Test 
	public void testserialization() throws Exception{
		HarvesterOptions options = new HarvesterOptions();
		options.setDb("test");

		String filename = "src/test/resources/options.ser";

		FileOutputStream byos = new FileOutputStream(filename);
		ObjectOutputStream oos = new ObjectOutputStream(byos);
		oos.writeObject(options);


		FileInputStream bais = new FileInputStream(filename);
		ObjectInputStream ois = new ObjectInputStream(bais);
		HarvesterOptions options2 = (HarvesterOptions) ois.readObject();
		System.out.println(options2.getDb());
	}

	@Test
	public void testPackager() throws Exception{
		String one = "2013-04-15T17:41:44Z";
		String two = "2013-03-21T17:01:33Z";

		String format = "yyyy-MM-dd'T'HH:mm:ss'Z'";


		SimpleDateFormat sdf = new SimpleDateFormat(format);
		Date dOne = sdf.parse(one);


		SimpleDateFormat sdf2 = new SimpleDateFormat(format);
		Date dTwo = sdf2.parse(two);

		System.out.println(dOne.after(dTwo));

		/*
		Packager packager = new Packager("src/test/resources/", "compressed", "ddi");
		packager.packageFiles();
		 */
	}
	
	@Test
	public void testQuery() throws Exception{
		
		Context context = new Context();
		
		new Open("ch_fors_compass").execute(context);
		
		InputStream in = getClass().getResourceAsStream("/nesstarvester_catalog.xq");
		BufferedReader br = new BufferedReader(new InputStreamReader(in));

		String xquery = "";
		String queryLine = "";

		//creates the xquery that in in src/main/resources/nesstarvester_catalog_changes.xq
		while((queryLine = br.readLine()) != null){
			xquery += queryLine;
		}
		br.close();
		
		String updates = (new XQuery(xquery).execute(context));
		System.out.println(updates);
		
		new Close().execute(context);
	}
}
